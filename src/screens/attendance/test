import { View, Text, StyleSheet, FlatList, SafeAreaView, Alert, Pressable } from 'react-native';
import React, { useState, useEffect, useCallback } from 'react';
import { useSelector } from 'react-redux';
import { useFocusEffect } from '@react-navigation/native';
import { RootState } from 'src/redux';
import { CODE_OK, INVALID_TOKEN, NOT_ACCESS } from 'src/common/constants/responseCode';
import { useAppDispatch } from 'src/redux';
import { hideLoading, showLoading } from 'src/redux/slices/loadingSlice';
import { logout } from 'src/redux/slices/authSlice';
import { getAttendanceListApi, setAttendanceStatusApi } from 'src/services/attendance.service';
import Icon from 'react-native-vector-icons/FontAwesome';

const color = {
  red: '#FF0000' // Định nghĩa màu đỏ
};

const AttendanceListPage = ({ classId }) => {
  const [attendanceList, setAttendanceList] = useState([]);
  const [totalRecords, setTotalRecords] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  const user = useSelector((state: RootState) => state.auth.user);
  const { token } = user || {};
  const dispatch = useAppDispatch();

  // Hàm lấy danh sách điểm danh
  const fetchAttendanceList = useCallback(async () => {
    try {
      dispatch(showLoading());
      const response = await getAttendanceListApi({
        token,
        class_id: classId,
        date: '2024-11-02',
        pageable_request: { page: currentPage - 1, page_size: itemsPerPage }
      });

      if (response?.meta?.code === CODE_OK) {
        setAttendanceList(response.data.attendance_student_details);
        setTotalRecords(response.data.page_info.total_records);
      } else {
        handleApiError(response);
      }
    } catch (error) {
      Alert.alert('Lỗi', 'Lấy danh sách điểm danh thất bại');
    } finally {
      dispatch(hideLoading());
    }
  }, [token, classId, currentPage, dispatch]);

  useFocusEffect(fetchAttendanceList); // Gọi fetchData khi component được focus

  // Hàm cập nhật trạng thái điểm danh
  const handleStatusUpdate = async (attendanceId, status) => {
    try {
      const response = await setAttendanceStatusApi({ token, attendance_id: attendanceId, status });

      if (response.meta.code === '1000') {
        Alert.alert('Thành công', 'Cập nhật trạng thái thành công');
        // Cập nhật trực tiếp trạng thái của sinh viên trong danh sách mà không cần gọi lại API
        setAttendanceList(prevList =>
          prevList.map(item => (item.attendance_id === attendanceId ? { ...item, status } : item))
        );
      } else {
        Alert.alert('Lỗi', 'Cập nhật trạng thái thất bại');
      }
    } catch (error) {
      Alert.alert('Lỗi', 'Có lỗi xảy ra khi cập nhật trạng thái');
    }
  };

  // Hàm xử lý lỗi API chung
  const handleApiError = response => {
    switch (response?.meta?.code) {
      case INVALID_TOKEN:
        Alert.alert('Lỗi', 'Token không hợp lệ');
        dispatch(logout());
        break;
      case NOT_ACCESS:
        Alert.alert('Lỗi', 'Bạn không có quyền truy cập');
        break;
      default:
        Alert.alert('Lỗi', 'Có lỗi xảy ra');
        console.error(response?.data);
    }
  };

  // Hàm điều hướng trang
  const handlePageChange = direction => {
    setCurrentPage(prevPage => {
      const newPage = prevPage + direction;
      return newPage > 0 && newPage <= Math.ceil(totalRecords / itemsPerPage) ? newPage : prevPage;
    });
  };

  // Render từng mục điểm danh
  const renderItem = ({ item }) => (
    <View style={styles.itemContainer}>
      <Text style={styles.studentInfo}>{`Mã sinh viên: ${item.student_id}`}</Text>
      <Text style={styles.statusInfo}>{`Trạng thái: ${item.status}`}</Text>
      <View style={styles.statusButtons}>
        {['PRESENT', 'EXCUSED_ABSENCE', 'UNEXCUSED_ABSENCE'].map(status => (
          <Pressable key={status} onPress={() => handleStatusUpdate(item.attendance_id, status)}>
            <Text style={styles.buttonText}>{status}</Text>
          </Pressable>
        ))}
      </View>
    </View>
  );

  return (
    <SafeAreaView style={styles.container}>
      <Text style={styles.title}>Danh sách điểm danh:</Text>
      <FlatList
        data={attendanceList}
        renderItem={renderItem}
        keyExtractor={item => item.attendance_id.toString()}
        contentContainerStyle={styles.list}
      />
      {totalRecords > 0 && (
        <View style={styles.pagination}>
          <Pressable onPress={() => handlePageChange(-1)} disabled={currentPage === 1}>
            <Icon name='chevron-left' size={20} color={color.red} />
          </Pressable>
          <Text style={styles.pageIndicator}>{`${currentPage} / ${Math.ceil(
            totalRecords / itemsPerPage
          )}`}</Text>
          <Pressable
            onPress={() => handlePageChange(1)}
            disabled={currentPage === Math.ceil(totalRecords / itemsPerPage)}
          >
            <Icon name='chevron-right' size={20} color={color.red} />
          </Pressable>
        </View>
      )}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    padding: 20
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: color.red,
    marginBottom: 20
  },
  list: {
    paddingBottom: 20
  },
  itemContainer: {
    padding: 15,
    borderBottomWidth: 1,
    borderColor: '#ddd',
    marginBottom: 15,
    borderRadius: 8,
    backgroundColor: '#f9f9f9'
  },
  studentInfo: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 5
  },
  statusInfo: {
    fontSize: 14,
    color: '#333',
    marginBottom: 10
  },
  statusButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 10
  },
  buttonText: {
    color: color.red,
    fontWeight: 'bold',
    fontSize: 16
  },
  pagination: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginVertical: 20
  },
  pageIndicator: {
    fontSize: 16,
    marginHorizontal: 10,
    color: color.red
  }
});

export default AttendanceListPage;
